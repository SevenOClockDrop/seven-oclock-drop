<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" /><meta name="viewport" content="width=device-width, initial-scale=1.0" /><title>SevenO'Clock Drop</title>
  <script src="https://sdk.pi.network/pi-sdk.js"></script>
  <script>Pi.init({ version: "2.0", sandbox: true })</script>
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@500&family=Inter&display=swap');
    body { margin: 0; font-family: 'Inter', sans-serif; background-color: #121212; color: #FFFFFF; display: flex; justify-content: center; align-items: center; min-height: 100vh; }
    .container { text-align: center; max-width: 400px; padding: 20px; }
    .title { font-family: 'Orbitron', sans-serif; font-size: 2rem; color: #00FFFF; margin-bottom: 20px; }
    .pot-display { position: relative; margin: 20px auto; width: 200px; height: 200px; }
    .pot-ring { width: 100%; height: 100%; border: 5px solid #8A2BE2; border-radius: 50%; animation: pulse 2s infinite; }
    .pot-value { position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); font-size: 1.5rem; color: #FF00FF; font-family: 'Orbitron', sans-serif; }
    .countdown label { font-size: 0.9rem; color: #CCCCCC; }
    #timer { font-size: 1.5rem; color: #00FFFF; margin: 10px 0; font-family: 'Orbitron', sans-serif; }
    .cta-button { background: linear-gradient(90deg, #00FFFF, #FF00FF); border: none; color: white; padding: 12px 24px; font-size: 1rem; border-radius: 30px; cursor: pointer; animation: pulse 1.5s infinite; margin-top: 10px; }
    .entry-info { margin-top: 15px; font-size: 1rem; color: #CCCCCC; }
    .referral { margin-top: 20px; }
    .referral label { display: block; margin-bottom: 5px; font-size: 0.9rem; color: #CCCCCC; }
    .referral input { padding: 8px; width: 80%; border-radius: 8px; border: 1px solid #8A2BE2; background-color: #000; color: #FFFFFF; }
    .referral-button { margin-top: 10px; padding: 8px 16px; background: linear-gradient(90deg, #00FFFF, #FF00FF); border: none; border-radius: 20px; color: white; cursor: pointer; font-size: 0.9rem; }
    .referral-status { margin-top: 10px; font-size: 0.9rem; color: #00FFAA; min-height: 1.2em; }
    @keyframes pulse { 0% { box-shadow: 0 0 5px #00FFFF; } 50% { box-shadow: 0 0 20px #FF00FF; } 100% { box-shadow: 0 0 5px #00FFFF; } }
  </style>
</head>
<body>
  <div class="container">
    <h1 class="title">SevenO'Clock Drop</h1><div class="pot-display"><div class="pot-ring"></div><div class="pot-value" id="potValue">... π</div></div>
    <div class="countdown"><label>NEXT DROP IN</label><div id="timer">--:--:--</div></div>
    <button type="button" class="cta-button">GET ENTRIES</button>
    <div class="entry-info"><span>YOUR ENTRIES: <strong id="userEntries">--</strong></span></div>
    <div class="referral">
      <label for="referralCode">Referral Code</label><input type="text" id="referralCode" placeholder="Enter code for 5 bonus entries" />
      <button type="button" class="referral-button" onclick="applyReferral()">Apply Code</button><div id="referralStatus" class="referral-status"></div>
    </div>
  </div>
  <script>
    const API_BASE_URL = ''; let countdownInterval;
    async function initializeApp() { try { const response = await fetch(`${API_BASE_URL}/api/app-data`); if (!response.ok) throw new Error('Server connection failed'); const data = await response.json(); updateUI(data); } catch (error) { console.error('Failed to fetch app data:', error); document.getElementById('potValue').textContent = "Error"; document.getElementById('timer').textContent = "Could not connect"; } }
    function updateUI(data) { document.getElementById('potValue').textContent = `${data.potValue} π`; document.getElementById('userEntries').textContent = data.userEntries; startCountdown(data.nextDropTimestamp); }
    function startCountdown(targetTimestamp) { if (countdownInterval) clearInterval(countdownInterval); const timerElement = document.getElementById('timer'); countdownInterval = setInterval(() => { const diff = targetTimestamp - new Date().getTime(); if (diff < 0) { timerElement.textContent = "00:00:00"; clearInterval(countdownInterval); return; } const hours = Math.floor(diff / (1000 * 60 * 60)); const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60)); const seconds = Math.floor((diff % (1000 * 60)) / 1000); timerElement.textContent = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`; }, 1000); }
    async function applyReferral() { const code = document.getElementById("referralCode").value.trim(); const status = document.getElementById("referralStatus"); try { const response = await fetch(`${API_BASE_URL}/api/apply-referral`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ code: code }) }); const result = await response.json(); status.textContent = result.message; if (response.ok) { status.style.color = "#00FFAA"; document.getElementById('userEntries').textContent = result.newEntryCount; } else { status.style.color = "#FF4444"; } } catch (error) { console.error('Referral request failed:', error); status.textContent = 'Error connecting to server.'; status.style.color = "#FF4444"; } }
    document.addEventListener('DOMContentLoaded', initializeApp);
  </script>
</body>
</html>
